{"version":3,"file":"index.mjs","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport {ResizeObserver, ResizeObserverEntry} from '@juggle/resize-observer'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\nimport useLatest from '@react-hook/latest'\nimport rafSchd from 'raf-schd'\n\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n *\n * @param target A React ref created by `useRef()` or an HTML element\n * @param callback Invoked with a single `ResizeObserverEntry` any time\n *   the `target` resizes\n */\nfunction useResizeObserver<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  callback: UseResizeObserverCallback\n): ResizeObserver {\n  const resizeObserver = getResizeObserver()\n  const storedCallback = useLatest(callback)\n\n  useLayoutEffect(() => {\n    let didUnsubscribe = false\n    const targetEl = target && 'current' in target ? target.current : target\n    if (!targetEl) return\n\n    resizeObserver.subscribe(\n      targetEl,\n      (entry: ResizeObserverEntry, observer: ResizeObserver) => {\n        if (didUnsubscribe) return\n        storedCallback.current(entry, observer)\n      }\n    )\n\n    return () => {\n      didUnsubscribe = true\n      resizeObserver.unsubscribe(targetEl)\n    }\n  }, [target, resizeObserver, storedCallback])\n\n  return resizeObserver.observer\n}\n\nfunction createResizeObserver() {\n  const callbacks: Map<any, UseResizeObserverCallback> = new Map()\n  const observer = new ResizeObserver(\n    rafSchd((entries, observer) => {\n      if (entries.length === 1) {\n        callbacks.get(entries[0].target)?.(entries[0], observer)\n      } else {\n        for (let i = 0; i < entries.length; i++) {\n          callbacks.get(entries[i].target)?.(entries[i], observer)\n        }\n      }\n    })\n  )\n\n  return {\n    observer,\n    subscribe(target: HTMLElement, callback: UseResizeObserverCallback) {\n      observer.observe(target)\n      callbacks.set(target, callback)\n    },\n    unsubscribe(target: HTMLElement) {\n      observer.unobserve(target)\n      callbacks.delete(target)\n    },\n  }\n}\n\nlet _resizeObserver: ReturnType<typeof createResizeObserver>\n\nconst getResizeObserver = () =>\n  !_resizeObserver\n    ? (_resizeObserver = createResizeObserver())\n    : _resizeObserver\n\nexport type UseResizeObserverCallback = (\n  entry: ResizeObserverEntry,\n  observer: ResizeObserver\n) => any\n\nexport default useResizeObserver\n"],"names":["_resizeObserver","target","callback","callbacks","observer","resizeObserver","Map","ResizeObserver","rafSchd","entries","length","get","i","subscribe","observe","set","unsubscribe","unobserve","delete","storedCallback","useLatest","useLayoutEffect","didUnsubscribe","targetEl","current","entry"],"mappings":"oKAqEA,IAAIA,iBAxDJ,SACEC,EACAC,OA4BMC,EACAC,EA3BAC,EAuDLL,IA7BKG,EAAiD,IAAIG,IACrDF,EAAW,IAAIG,EACnBC,EAAQ,CAACC,EAASL,cACO,IAAnBK,EAAQC,iBACVP,EAAUQ,IAAIF,EAAQ,GAAGR,wBAAUQ,EAAQ,GAAIL,YAE1C,IAAIQ,EAAI,EAAGA,EAAIH,EAAQC,OAAQE,IAAK,iBACvCT,EAAUQ,IAAIF,EAAQG,GAAGX,wBAAUQ,EAAQG,GAAIR,OAuBlDJ,EAjBE,CACLI,SAAAA,EACAS,UAAUZ,EAAqBC,GAC7BE,EAASU,QAAQb,GACjBE,EAAUY,IAAId,EAAQC,IAExBc,YAAYf,GACVG,EAASa,UAAUhB,GACnBE,EAAUe,OAAOjB,MA9CfkB,EAAiBC,EAAUlB,UAEjCmB,EAAgB,SACVC,EAAiB,EACfC,EAAWtB,GAAU,YAAaA,EAASA,EAAOuB,QAAUvB,KAC7DsB,SAELlB,EAAeQ,UACbU,EACA,CAACE,EAA4BrB,KACvBkB,GACJH,EAAeK,QAAQC,EAAOrB,KAI3B,KACLkB,EAAiB,EACjBjB,EAAeW,YAAYO,KAE5B,CAACtB,EAAQI,EAAgBc,IAErBd,EAAeD"}