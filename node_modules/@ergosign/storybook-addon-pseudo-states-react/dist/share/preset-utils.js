"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyCssLoaderModuleOption = exports.addPostCSSLoaderToRules = exports.filterRules = exports.cssLoaderOptionsDefault = exports.postCSSOptionsDefault = void 0;
var postcss_pseudo_classes_1 = __importDefault(require("postcss-pseudo-classes"));
var postCssLoaderName = 'postcss-loader';
exports.postCSSOptionsDefault = {
    blacklist: [':root', ':host', ':host-context', ':nth-child', ':nth-of-type'],
};
var cssLoaderName = 'css-loader';
exports.cssLoaderOptionsDefault = {
    modules: {
        localIdentName: '[path][name]__[local]',
    },
};
exports.filterRules = function (rules, conditions) {
    var e_1, _a, e_2, _b, e_3, _c;
    var ruleReferences = [];
    try {
        for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
            var rule = rules_1_1.value;
            if (rule.test) {
                var ruleCondition = rule.test;
                try {
                    for (var conditions_1 = (e_2 = void 0, __values(conditions)), conditions_1_1 = conditions_1.next(); !conditions_1_1.done; conditions_1_1 = conditions_1.next()) {
                        var condition = conditions_1_1.value;
                        if (ruleCondition === rule) {
                            ruleReferences.push(rule);
                        }
                        if (ruleCondition.toString() === condition.toString()) {
                            ruleReferences.push(rule);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (conditions_1_1 && !conditions_1_1.done && (_b = conditions_1.return)) _b.call(conditions_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (rule.oneOf) {
                var subRules = rule.oneOf;
                var filteredSubRules = exports.filterRules(subRules, conditions);
                try {
                    for (var filteredSubRules_1 = (e_3 = void 0, __values(filteredSubRules)), filteredSubRules_1_1 = filteredSubRules_1.next(); !filteredSubRules_1_1.done; filteredSubRules_1_1 = filteredSubRules_1.next()) {
                        var filterdRule = filteredSubRules_1_1.value;
                        ruleReferences.push(filterdRule);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (filteredSubRules_1_1 && !filteredSubRules_1_1.done && (_c = filteredSubRules_1.return)) _c.call(filteredSubRules_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return ruleReferences;
};
var addPostCssLoader = function (use, postCssLoaderOptions) {
    var e_4, _a;
    if (typeof use === 'string' && use.includes(postCssLoaderName)) {
        return {
            loader: postCssLoaderName,
            options: {
                plugins: function () { return [postcss_pseudo_classes_1.default(postCssLoaderOptions)]; },
            },
        };
    }
    if (typeof use === 'function') {
        return function (data) {
            var useFnResult = use(data);
            return addPostCssLoader(useFnResult, postCssLoaderOptions);
        };
    }
    if (Array.isArray(use)) {
        try {
            for (var use_1 = __values(use), use_1_1 = use_1.next(); !use_1_1.done; use_1_1 = use_1.next()) {
                var item = use_1_1.value;
                addPostCssLoader(item, postCssLoaderOptions);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (use_1_1 && !use_1_1.done && (_a = use_1.return)) _a.call(use_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return use;
    }
    var useItem = use;
    if ((useItem === null || useItem === void 0 ? void 0 : useItem.loader) && useItem.loader.includes(postCssLoaderName)) {
        if (useItem.options) {
            var plugins_1 = useItem.options.plugins;
            if (plugins_1) {
                if (typeof plugins_1 === 'string') {
                    useItem.options.plugins = [
                        postcss_pseudo_classes_1.default(postCssLoaderOptions),
                    ];
                }
                else if (Array.isArray(plugins_1)) {
                    useItem.options.plugins.add(postcss_pseudo_classes_1.default(postCssLoaderOptions));
                    useItem.options.plugins.add(function () {
                        return postcss_pseudo_classes_1.default(postCssLoaderOptions);
                    });
                }
                else if (typeof plugins_1 === 'function') {
                    var overwrittenPostCssFn = function () { return [
                        plugins_1,
                        postcss_pseudo_classes_1.default(postCssLoaderOptions),
                    ]; };
                    useItem.options.plugins = overwrittenPostCssFn;
                }
                else {
                    useItem.options.plugins = __assign(__assign({}, plugins_1), function () { return postcss_pseudo_classes_1.default(postCssLoaderOptions); });
                }
            }
        }
        else {
            useItem.options = {
                plugins: [postcss_pseudo_classes_1.default(postCssLoaderOptions)],
            };
        }
        return use;
    }
    return use;
};
exports.addPostCSSLoaderToRules = function (rules, postCssLoaderOptions) {
    var e_5, _a;
    try {
        for (var rules_2 = __values(rules), rules_2_1 = rules_2.next(); !rules_2_1.done; rules_2_1 = rules_2.next()) {
            var rule = rules_2_1.value;
            if (rule.use) {
                rule.use = addPostCssLoader(rule.use, postCssLoaderOptions);
            }
            else {
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (rules_2_1 && !rules_2_1.done && (_a = rules_2.return)) _a.call(rules_2);
        }
        finally { if (e_5) throw e_5.error; }
    }
};
var modifyCssLoader = function (use, cssLoaderOptions) {
    var e_6, _a;
    if (typeof use === 'string' && use.includes(cssLoaderName)) {
        return {
            loader: cssLoaderName,
            options: __assign({}, cssLoaderOptions),
        };
    }
    if (typeof use === 'function') {
        return function (data) {
            var useFnResult = use(data);
            return modifyCssLoader(useFnResult, cssLoaderOptions);
        };
    }
    if (Array.isArray(use)) {
        try {
            for (var use_2 = __values(use), use_2_1 = use_2.next(); !use_2_1.done; use_2_1 = use_2.next()) {
                var item = use_2_1.value;
                modifyCssLoader(item, cssLoaderOptions);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (use_2_1 && !use_2_1.done && (_a = use_2.return)) _a.call(use_2);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return use;
    }
    var useItem = use;
    if ((useItem === null || useItem === void 0 ? void 0 : useItem.loader) && useItem.loader.includes(cssLoaderName)) {
        if (useItem.options) {
            var modules = useItem.options.modules;
            if (modules) {
                if (typeof modules === 'string' && modules === 'true') {
                    useItem.options.modules = cssLoaderOptions.modules;
                }
                else if (typeof modules === 'boolean' && modules) {
                    useItem.options.modules = cssLoaderOptions.modules;
                }
                else {
                    if (useItem.options &&
                        useItem.options.modules &&
                        useItem.options.modules.getLocalIdent) {
                        delete useItem.options.modules.getLocalIdent;
                    }
                    useItem.options.modules = __assign(__assign({}, useItem.options.modules), cssLoaderOptions === null || cssLoaderOptions === void 0 ? void 0 : cssLoaderOptions.modules);
                }
            }
        }
        else {
            useItem.options = __assign({}, cssLoaderOptions);
        }
        return use;
    }
    return use;
};
exports.modifyCssLoaderModuleOption = function (rules, cssLoaderOptions) {
    var e_7, _a;
    try {
        for (var rules_3 = __values(rules), rules_3_1 = rules_3.next(); !rules_3_1.done; rules_3_1 = rules_3.next()) {
            var rule = rules_3_1.value;
            if (rule.use) {
                rule.use = modifyCssLoader(rule.use, cssLoaderOptions);
            }
            else {
            }
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (rules_3_1 && !rules_3_1.done && (_a = rules_3.return)) _a.call(rules_3);
        }
        finally { if (e_7) throw e_7.error; }
    }
};
//# sourceMappingURL=preset-utils.js.map